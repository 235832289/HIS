//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.5485
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace BeInHospital.ReportForm {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DataSetPrepayQuery")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DataSetPrepayQuery : global::System.Data.DataSet {
        
        private DataTable1DataTable tableDataTable1;
        
        private DataTable2DataTable tableDataTable2;
        
        private DataTable3DataTable tableDataTable3;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DataSetPrepayQuery() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DataSetPrepayQuery(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["DataTable1"] != null)) {
                    base.Tables.Add(new DataTable1DataTable(ds.Tables["DataTable1"]));
                }
                if ((ds.Tables["DataTable2"] != null)) {
                    base.Tables.Add(new DataTable2DataTable(ds.Tables["DataTable2"]));
                }
                if ((ds.Tables["DataTable3"] != null)) {
                    base.Tables.Add(new DataTable3DataTable(ds.Tables["DataTable3"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DataTable1DataTable DataTable1 {
            get {
                return this.tableDataTable1;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DataTable2DataTable DataTable2 {
            get {
                return this.tableDataTable2;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DataTable3DataTable DataTable3 {
            get {
                return this.tableDataTable3;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            DataSetPrepayQuery cln = ((DataSetPrepayQuery)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["DataTable1"] != null)) {
                    base.Tables.Add(new DataTable1DataTable(ds.Tables["DataTable1"]));
                }
                if ((ds.Tables["DataTable2"] != null)) {
                    base.Tables.Add(new DataTable2DataTable(ds.Tables["DataTable2"]));
                }
                if ((ds.Tables["DataTable3"] != null)) {
                    base.Tables.Add(new DataTable3DataTable(ds.Tables["DataTable3"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableDataTable1 = ((DataTable1DataTable)(base.Tables["DataTable1"]));
            if ((initTable == true)) {
                if ((this.tableDataTable1 != null)) {
                    this.tableDataTable1.InitVars();
                }
            }
            this.tableDataTable2 = ((DataTable2DataTable)(base.Tables["DataTable2"]));
            if ((initTable == true)) {
                if ((this.tableDataTable2 != null)) {
                    this.tableDataTable2.InitVars();
                }
            }
            this.tableDataTable3 = ((DataTable3DataTable)(base.Tables["DataTable3"]));
            if ((initTable == true)) {
                if ((this.tableDataTable3 != null)) {
                    this.tableDataTable3.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DataSetPrepayQuery";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSetPrepayQuery.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableDataTable1 = new DataTable1DataTable();
            base.Tables.Add(this.tableDataTable1);
            this.tableDataTable2 = new DataTable2DataTable();
            base.Tables.Add(this.tableDataTable2);
            this.tableDataTable3 = new DataTable3DataTable();
            base.Tables.Add(this.tableDataTable3);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDataTable1() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDataTable2() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDataTable3() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DataSetPrepayQuery ds = new DataSetPrepayQuery();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void DataTable1RowChangeEventHandler(object sender, DataTable1RowChangeEvent e);
        
        public delegate void DataTable2RowChangeEventHandler(object sender, DataTable2RowChangeEvent e);
        
        public delegate void DataTable3RowChangeEventHandler(object sender, DataTable3RowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DataTable1DataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnINPATIENTID_CHR;
            
            private global::System.Data.DataColumn columnLASTNAME_VCHR;
            
            private global::System.Data.DataColumn columnSEX_CHR;
            
            private global::System.Data.DataColumn columnDEPTNAME_VCHR;
            
            private global::System.Data.DataColumn columnCREATE_DAT;
            
            private global::System.Data.DataColumn columnPREPAYINV_VCHR;
            
            private global::System.Data.DataColumn columnMONEY_DEC;
            
            private global::System.Data.DataColumn columnPAYTYPE_INT;
            
            private global::System.Data.DataColumn columnBALANCEFLAG_INT;
            
            private global::System.Data.DataColumn columnPREPAYID_CHR;
            
            private global::System.Data.DataColumn columnCREATER;
            
            private global::System.Data.DataColumn columnCUYCATE_INT;
            
            private global::System.Data.DataColumn columnUPTYPE_INT;
            
            private global::System.Data.DataColumn columnCONFIRMEMP;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable1DataTable() {
                this.TableName = "DataTable1";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataTable1DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DataTable1DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn INPATIENTID_CHRColumn {
                get {
                    return this.columnINPATIENTID_CHR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LASTNAME_VCHRColumn {
                get {
                    return this.columnLASTNAME_VCHR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SEX_CHRColumn {
                get {
                    return this.columnSEX_CHR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DEPTNAME_VCHRColumn {
                get {
                    return this.columnDEPTNAME_VCHR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CREATE_DATColumn {
                get {
                    return this.columnCREATE_DAT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PREPAYINV_VCHRColumn {
                get {
                    return this.columnPREPAYINV_VCHR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MONEY_DECColumn {
                get {
                    return this.columnMONEY_DEC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PAYTYPE_INTColumn {
                get {
                    return this.columnPAYTYPE_INT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BALANCEFLAG_INTColumn {
                get {
                    return this.columnBALANCEFLAG_INT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PREPAYID_CHRColumn {
                get {
                    return this.columnPREPAYID_CHR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CREATERColumn {
                get {
                    return this.columnCREATER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CUYCATE_INTColumn {
                get {
                    return this.columnCUYCATE_INT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UPTYPE_INTColumn {
                get {
                    return this.columnUPTYPE_INT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CONFIRMEMPColumn {
                get {
                    return this.columnCONFIRMEMP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable1Row this[int index] {
                get {
                    return ((DataTable1Row)(this.Rows[index]));
                }
            }
            
            public event DataTable1RowChangeEventHandler DataTable1RowChanging;
            
            public event DataTable1RowChangeEventHandler DataTable1RowChanged;
            
            public event DataTable1RowChangeEventHandler DataTable1RowDeleting;
            
            public event DataTable1RowChangeEventHandler DataTable1RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDataTable1Row(DataTable1Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable1Row AddDataTable1Row(string INPATIENTID_CHR, string LASTNAME_VCHR, string SEX_CHR, string DEPTNAME_VCHR, string CREATE_DAT, string PREPAYINV_VCHR, string MONEY_DEC, string PAYTYPE_INT, string BALANCEFLAG_INT, string PREPAYID_CHR, string CREATER, string CUYCATE_INT, string UPTYPE_INT, string CONFIRMEMP) {
                DataTable1Row rowDataTable1Row = ((DataTable1Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        INPATIENTID_CHR,
                        LASTNAME_VCHR,
                        SEX_CHR,
                        DEPTNAME_VCHR,
                        CREATE_DAT,
                        PREPAYINV_VCHR,
                        MONEY_DEC,
                        PAYTYPE_INT,
                        BALANCEFLAG_INT,
                        PREPAYID_CHR,
                        CREATER,
                        CUYCATE_INT,
                        UPTYPE_INT,
                        CONFIRMEMP};
                rowDataTable1Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowDataTable1Row);
                return rowDataTable1Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DataTable1DataTable cln = ((DataTable1DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DataTable1DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnINPATIENTID_CHR = base.Columns["INPATIENTID_CHR"];
                this.columnLASTNAME_VCHR = base.Columns["LASTNAME_VCHR"];
                this.columnSEX_CHR = base.Columns["SEX_CHR"];
                this.columnDEPTNAME_VCHR = base.Columns["DEPTNAME_VCHR"];
                this.columnCREATE_DAT = base.Columns["CREATE_DAT"];
                this.columnPREPAYINV_VCHR = base.Columns["PREPAYINV_VCHR"];
                this.columnMONEY_DEC = base.Columns["MONEY_DEC"];
                this.columnPAYTYPE_INT = base.Columns["PAYTYPE_INT"];
                this.columnBALANCEFLAG_INT = base.Columns["BALANCEFLAG_INT"];
                this.columnPREPAYID_CHR = base.Columns["PREPAYID_CHR"];
                this.columnCREATER = base.Columns["CREATER"];
                this.columnCUYCATE_INT = base.Columns["CUYCATE_INT"];
                this.columnUPTYPE_INT = base.Columns["UPTYPE_INT"];
                this.columnCONFIRMEMP = base.Columns["CONFIRMEMP"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnINPATIENTID_CHR = new global::System.Data.DataColumn("INPATIENTID_CHR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnINPATIENTID_CHR);
                this.columnLASTNAME_VCHR = new global::System.Data.DataColumn("LASTNAME_VCHR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLASTNAME_VCHR);
                this.columnSEX_CHR = new global::System.Data.DataColumn("SEX_CHR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSEX_CHR);
                this.columnDEPTNAME_VCHR = new global::System.Data.DataColumn("DEPTNAME_VCHR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDEPTNAME_VCHR);
                this.columnCREATE_DAT = new global::System.Data.DataColumn("CREATE_DAT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCREATE_DAT);
                this.columnPREPAYINV_VCHR = new global::System.Data.DataColumn("PREPAYINV_VCHR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPREPAYINV_VCHR);
                this.columnMONEY_DEC = new global::System.Data.DataColumn("MONEY_DEC", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMONEY_DEC);
                this.columnPAYTYPE_INT = new global::System.Data.DataColumn("PAYTYPE_INT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPAYTYPE_INT);
                this.columnBALANCEFLAG_INT = new global::System.Data.DataColumn("BALANCEFLAG_INT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBALANCEFLAG_INT);
                this.columnPREPAYID_CHR = new global::System.Data.DataColumn("PREPAYID_CHR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPREPAYID_CHR);
                this.columnCREATER = new global::System.Data.DataColumn("CREATER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCREATER);
                this.columnCUYCATE_INT = new global::System.Data.DataColumn("CUYCATE_INT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCUYCATE_INT);
                this.columnUPTYPE_INT = new global::System.Data.DataColumn("UPTYPE_INT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUPTYPE_INT);
                this.columnCONFIRMEMP = new global::System.Data.DataColumn("CONFIRMEMP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCONFIRMEMP);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable1Row NewDataTable1Row() {
                return ((DataTable1Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DataTable1Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DataTable1Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DataTable1RowChanged != null)) {
                    this.DataTable1RowChanged(this, new DataTable1RowChangeEvent(((DataTable1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DataTable1RowChanging != null)) {
                    this.DataTable1RowChanging(this, new DataTable1RowChangeEvent(((DataTable1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DataTable1RowDeleted != null)) {
                    this.DataTable1RowDeleted(this, new DataTable1RowChangeEvent(((DataTable1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DataTable1RowDeleting != null)) {
                    this.DataTable1RowDeleting(this, new DataTable1RowChangeEvent(((DataTable1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDataTable1Row(DataTable1Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSetPrepayQuery ds = new DataSetPrepayQuery();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DataTable1DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DataTable2DataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnEMPNO_CHR;
            
            private global::System.Data.DataColumn columnFIRSTNAME_VCHR;
            
            private global::System.Data.DataColumn columnLASTNAME_VCHR;
            
            private global::System.Data.DataColumn columnPREPAYID_CHR;
            
            private global::System.Data.DataColumn columnPATIENTID_CHR;
            
            private global::System.Data.DataColumn columnREGISTERID_CHR;
            
            private global::System.Data.DataColumn columnLINER_INT;
            
            private global::System.Data.DataColumn columnPAYTYPE_INT;
            
            private global::System.Data.DataColumn columnCUYCATE_INT;
            
            private global::System.Data.DataColumn columnMONEY_DEC;
            
            private global::System.Data.DataColumn columnPREPAYINV_VCHR;
            
            private global::System.Data.DataColumn columnAREAID_CHR;
            
            private global::System.Data.DataColumn columnDES_VCHR;
            
            private global::System.Data.DataColumn columnCREATORID_CHR;
            
            private global::System.Data.DataColumn columnCREATE_DAT;
            
            private global::System.Data.DataColumn columnDEACTID_CHR;
            
            private global::System.Data.DataColumn columnDEACTIVATE_DAT;
            
            private global::System.Data.DataColumn columnSTATUS_INT;
            
            private global::System.Data.DataColumn columnISCLEAR_INT;
            
            private global::System.Data.DataColumn columnPRESSNO_VCHR;
            
            private global::System.Data.DataColumn columnUPTYPE_INT;
            
            private global::System.Data.DataColumn columnPATIENTNAME_CHR;
            
            private global::System.Data.DataColumn columnAREANAME_VCHR;
            
            private global::System.Data.DataColumn columnBALANCEFLAG_INT;
            
            private global::System.Data.DataColumn columnBALANCEEMP_CHR;
            
            private global::System.Data.DataColumn columnBALANCE_DAT;
            
            private global::System.Data.DataColumn columnCONFIRMEMP;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable2DataTable() {
                this.TableName = "DataTable2";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataTable2DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DataTable2DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EMPNO_CHRColumn {
                get {
                    return this.columnEMPNO_CHR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FIRSTNAME_VCHRColumn {
                get {
                    return this.columnFIRSTNAME_VCHR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LASTNAME_VCHRColumn {
                get {
                    return this.columnLASTNAME_VCHR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PREPAYID_CHRColumn {
                get {
                    return this.columnPREPAYID_CHR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PATIENTID_CHRColumn {
                get {
                    return this.columnPATIENTID_CHR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn REGISTERID_CHRColumn {
                get {
                    return this.columnREGISTERID_CHR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LINER_INTColumn {
                get {
                    return this.columnLINER_INT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PAYTYPE_INTColumn {
                get {
                    return this.columnPAYTYPE_INT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CUYCATE_INTColumn {
                get {
                    return this.columnCUYCATE_INT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MONEY_DECColumn {
                get {
                    return this.columnMONEY_DEC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PREPAYINV_VCHRColumn {
                get {
                    return this.columnPREPAYINV_VCHR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AREAID_CHRColumn {
                get {
                    return this.columnAREAID_CHR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DES_VCHRColumn {
                get {
                    return this.columnDES_VCHR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CREATORID_CHRColumn {
                get {
                    return this.columnCREATORID_CHR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CREATE_DATColumn {
                get {
                    return this.columnCREATE_DAT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DEACTID_CHRColumn {
                get {
                    return this.columnDEACTID_CHR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DEACTIVATE_DATColumn {
                get {
                    return this.columnDEACTIVATE_DAT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STATUS_INTColumn {
                get {
                    return this.columnSTATUS_INT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ISCLEAR_INTColumn {
                get {
                    return this.columnISCLEAR_INT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PRESSNO_VCHRColumn {
                get {
                    return this.columnPRESSNO_VCHR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UPTYPE_INTColumn {
                get {
                    return this.columnUPTYPE_INT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PATIENTNAME_CHRColumn {
                get {
                    return this.columnPATIENTNAME_CHR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AREANAME_VCHRColumn {
                get {
                    return this.columnAREANAME_VCHR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BALANCEFLAG_INTColumn {
                get {
                    return this.columnBALANCEFLAG_INT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BALANCEEMP_CHRColumn {
                get {
                    return this.columnBALANCEEMP_CHR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BALANCE_DATColumn {
                get {
                    return this.columnBALANCE_DAT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CONFIRMEMPColumn {
                get {
                    return this.columnCONFIRMEMP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable2Row this[int index] {
                get {
                    return ((DataTable2Row)(this.Rows[index]));
                }
            }
            
            public event DataTable2RowChangeEventHandler DataTable2RowChanging;
            
            public event DataTable2RowChangeEventHandler DataTable2RowChanged;
            
            public event DataTable2RowChangeEventHandler DataTable2RowDeleting;
            
            public event DataTable2RowChangeEventHandler DataTable2RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDataTable2Row(DataTable2Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable2Row AddDataTable2Row(
                        string EMPNO_CHR, 
                        string FIRSTNAME_VCHR, 
                        string LASTNAME_VCHR, 
                        string PREPAYID_CHR, 
                        string PATIENTID_CHR, 
                        string REGISTERID_CHR, 
                        string LINER_INT, 
                        string PAYTYPE_INT, 
                        string CUYCATE_INT, 
                        string MONEY_DEC, 
                        string PREPAYINV_VCHR, 
                        string AREAID_CHR, 
                        string DES_VCHR, 
                        string CREATORID_CHR, 
                        string CREATE_DAT, 
                        string DEACTID_CHR, 
                        string DEACTIVATE_DAT, 
                        string STATUS_INT, 
                        string ISCLEAR_INT, 
                        string PRESSNO_VCHR, 
                        string UPTYPE_INT, 
                        string PATIENTNAME_CHR, 
                        string AREANAME_VCHR, 
                        string BALANCEFLAG_INT, 
                        string BALANCEEMP_CHR, 
                        string BALANCE_DAT, 
                        string CONFIRMEMP) {
                DataTable2Row rowDataTable2Row = ((DataTable2Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        EMPNO_CHR,
                        FIRSTNAME_VCHR,
                        LASTNAME_VCHR,
                        PREPAYID_CHR,
                        PATIENTID_CHR,
                        REGISTERID_CHR,
                        LINER_INT,
                        PAYTYPE_INT,
                        CUYCATE_INT,
                        MONEY_DEC,
                        PREPAYINV_VCHR,
                        AREAID_CHR,
                        DES_VCHR,
                        CREATORID_CHR,
                        CREATE_DAT,
                        DEACTID_CHR,
                        DEACTIVATE_DAT,
                        STATUS_INT,
                        ISCLEAR_INT,
                        PRESSNO_VCHR,
                        UPTYPE_INT,
                        PATIENTNAME_CHR,
                        AREANAME_VCHR,
                        BALANCEFLAG_INT,
                        BALANCEEMP_CHR,
                        BALANCE_DAT,
                        CONFIRMEMP};
                rowDataTable2Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowDataTable2Row);
                return rowDataTable2Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DataTable2DataTable cln = ((DataTable2DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DataTable2DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEMPNO_CHR = base.Columns["EMPNO_CHR"];
                this.columnFIRSTNAME_VCHR = base.Columns["FIRSTNAME_VCHR"];
                this.columnLASTNAME_VCHR = base.Columns["LASTNAME_VCHR"];
                this.columnPREPAYID_CHR = base.Columns["PREPAYID_CHR"];
                this.columnPATIENTID_CHR = base.Columns["PATIENTID_CHR"];
                this.columnREGISTERID_CHR = base.Columns["REGISTERID_CHR"];
                this.columnLINER_INT = base.Columns["LINER_INT"];
                this.columnPAYTYPE_INT = base.Columns["PAYTYPE_INT"];
                this.columnCUYCATE_INT = base.Columns["CUYCATE_INT"];
                this.columnMONEY_DEC = base.Columns["MONEY_DEC"];
                this.columnPREPAYINV_VCHR = base.Columns["PREPAYINV_VCHR"];
                this.columnAREAID_CHR = base.Columns["AREAID_CHR"];
                this.columnDES_VCHR = base.Columns["DES_VCHR"];
                this.columnCREATORID_CHR = base.Columns["CREATORID_CHR"];
                this.columnCREATE_DAT = base.Columns["CREATE_DAT"];
                this.columnDEACTID_CHR = base.Columns["DEACTID_CHR"];
                this.columnDEACTIVATE_DAT = base.Columns["DEACTIVATE_DAT"];
                this.columnSTATUS_INT = base.Columns["STATUS_INT"];
                this.columnISCLEAR_INT = base.Columns["ISCLEAR_INT"];
                this.columnPRESSNO_VCHR = base.Columns["PRESSNO_VCHR"];
                this.columnUPTYPE_INT = base.Columns["UPTYPE_INT"];
                this.columnPATIENTNAME_CHR = base.Columns["PATIENTNAME_CHR"];
                this.columnAREANAME_VCHR = base.Columns["AREANAME_VCHR"];
                this.columnBALANCEFLAG_INT = base.Columns["BALANCEFLAG_INT"];
                this.columnBALANCEEMP_CHR = base.Columns["BALANCEEMP_CHR"];
                this.columnBALANCE_DAT = base.Columns["BALANCE_DAT"];
                this.columnCONFIRMEMP = base.Columns["CONFIRMEMP"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEMPNO_CHR = new global::System.Data.DataColumn("EMPNO_CHR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEMPNO_CHR);
                this.columnFIRSTNAME_VCHR = new global::System.Data.DataColumn("FIRSTNAME_VCHR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFIRSTNAME_VCHR);
                this.columnLASTNAME_VCHR = new global::System.Data.DataColumn("LASTNAME_VCHR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLASTNAME_VCHR);
                this.columnPREPAYID_CHR = new global::System.Data.DataColumn("PREPAYID_CHR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPREPAYID_CHR);
                this.columnPATIENTID_CHR = new global::System.Data.DataColumn("PATIENTID_CHR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPATIENTID_CHR);
                this.columnREGISTERID_CHR = new global::System.Data.DataColumn("REGISTERID_CHR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREGISTERID_CHR);
                this.columnLINER_INT = new global::System.Data.DataColumn("LINER_INT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLINER_INT);
                this.columnPAYTYPE_INT = new global::System.Data.DataColumn("PAYTYPE_INT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPAYTYPE_INT);
                this.columnCUYCATE_INT = new global::System.Data.DataColumn("CUYCATE_INT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCUYCATE_INT);
                this.columnMONEY_DEC = new global::System.Data.DataColumn("MONEY_DEC", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMONEY_DEC);
                this.columnPREPAYINV_VCHR = new global::System.Data.DataColumn("PREPAYINV_VCHR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPREPAYINV_VCHR);
                this.columnAREAID_CHR = new global::System.Data.DataColumn("AREAID_CHR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAREAID_CHR);
                this.columnDES_VCHR = new global::System.Data.DataColumn("DES_VCHR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDES_VCHR);
                this.columnCREATORID_CHR = new global::System.Data.DataColumn("CREATORID_CHR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCREATORID_CHR);
                this.columnCREATE_DAT = new global::System.Data.DataColumn("CREATE_DAT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCREATE_DAT);
                this.columnDEACTID_CHR = new global::System.Data.DataColumn("DEACTID_CHR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDEACTID_CHR);
                this.columnDEACTIVATE_DAT = new global::System.Data.DataColumn("DEACTIVATE_DAT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDEACTIVATE_DAT);
                this.columnSTATUS_INT = new global::System.Data.DataColumn("STATUS_INT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTATUS_INT);
                this.columnISCLEAR_INT = new global::System.Data.DataColumn("ISCLEAR_INT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnISCLEAR_INT);
                this.columnPRESSNO_VCHR = new global::System.Data.DataColumn("PRESSNO_VCHR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRESSNO_VCHR);
                this.columnUPTYPE_INT = new global::System.Data.DataColumn("UPTYPE_INT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUPTYPE_INT);
                this.columnPATIENTNAME_CHR = new global::System.Data.DataColumn("PATIENTNAME_CHR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPATIENTNAME_CHR);
                this.columnAREANAME_VCHR = new global::System.Data.DataColumn("AREANAME_VCHR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAREANAME_VCHR);
                this.columnBALANCEFLAG_INT = new global::System.Data.DataColumn("BALANCEFLAG_INT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBALANCEFLAG_INT);
                this.columnBALANCEEMP_CHR = new global::System.Data.DataColumn("BALANCEEMP_CHR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBALANCEEMP_CHR);
                this.columnBALANCE_DAT = new global::System.Data.DataColumn("BALANCE_DAT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBALANCE_DAT);
                this.columnCONFIRMEMP = new global::System.Data.DataColumn("CONFIRMEMP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCONFIRMEMP);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable2Row NewDataTable2Row() {
                return ((DataTable2Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DataTable2Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DataTable2Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DataTable2RowChanged != null)) {
                    this.DataTable2RowChanged(this, new DataTable2RowChangeEvent(((DataTable2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DataTable2RowChanging != null)) {
                    this.DataTable2RowChanging(this, new DataTable2RowChangeEvent(((DataTable2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DataTable2RowDeleted != null)) {
                    this.DataTable2RowDeleted(this, new DataTable2RowChangeEvent(((DataTable2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DataTable2RowDeleting != null)) {
                    this.DataTable2RowDeleting(this, new DataTable2RowChangeEvent(((DataTable2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDataTable2Row(DataTable2Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSetPrepayQuery ds = new DataSetPrepayQuery();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DataTable2DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DataTable3DataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnBalanceEmp;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnAllCount;
            
            private global::System.Data.DataColumn columnSumMoney;
            
            private global::System.Data.DataColumn columnAvailCount;
            
            private global::System.Data.DataColumn columnAvailMoney;
            
            private global::System.Data.DataColumn columnCashCount;
            
            private global::System.Data.DataColumn columnCash;
            
            private global::System.Data.DataColumn columnChequeCount;
            
            private global::System.Data.DataColumn columnCheque;
            
            private global::System.Data.DataColumn columnCreditcardCount;
            
            private global::System.Data.DataColumn columnCreditcard;
            
            private global::System.Data.DataColumn columnOthersCount;
            
            private global::System.Data.DataColumn columnOthers;
            
            private global::System.Data.DataColumn columnRefundmentCount;
            
            private global::System.Data.DataColumn columnRefundment;
            
            private global::System.Data.DataColumn columnCancelCount;
            
            private global::System.Data.DataColumn columnCancelMoney;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable3DataTable() {
                this.TableName = "DataTable3";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataTable3DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DataTable3DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BalanceEmpColumn {
                get {
                    return this.columnBalanceEmp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AllCountColumn {
                get {
                    return this.columnAllCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SumMoneyColumn {
                get {
                    return this.columnSumMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AvailCountColumn {
                get {
                    return this.columnAvailCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AvailMoneyColumn {
                get {
                    return this.columnAvailMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CashCountColumn {
                get {
                    return this.columnCashCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CashColumn {
                get {
                    return this.columnCash;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ChequeCountColumn {
                get {
                    return this.columnChequeCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ChequeColumn {
                get {
                    return this.columnCheque;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreditcardCountColumn {
                get {
                    return this.columnCreditcardCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreditcardColumn {
                get {
                    return this.columnCreditcard;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OthersCountColumn {
                get {
                    return this.columnOthersCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OthersColumn {
                get {
                    return this.columnOthers;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefundmentCountColumn {
                get {
                    return this.columnRefundmentCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefundmentColumn {
                get {
                    return this.columnRefundment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CancelCountColumn {
                get {
                    return this.columnCancelCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CancelMoneyColumn {
                get {
                    return this.columnCancelMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable3Row this[int index] {
                get {
                    return ((DataTable3Row)(this.Rows[index]));
                }
            }
            
            public event DataTable3RowChangeEventHandler DataTable3RowChanging;
            
            public event DataTable3RowChangeEventHandler DataTable3RowChanged;
            
            public event DataTable3RowChangeEventHandler DataTable3RowDeleting;
            
            public event DataTable3RowChangeEventHandler DataTable3RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDataTable3Row(DataTable3Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable3Row AddDataTable3Row(
                        string BalanceEmp, 
                        string Name, 
                        string AllCount, 
                        string SumMoney, 
                        string AvailCount, 
                        string AvailMoney, 
                        string CashCount, 
                        string Cash, 
                        string ChequeCount, 
                        string Cheque, 
                        string CreditcardCount, 
                        string Creditcard, 
                        string OthersCount, 
                        string Others, 
                        string RefundmentCount, 
                        string Refundment, 
                        string CancelCount, 
                        string CancelMoney) {
                DataTable3Row rowDataTable3Row = ((DataTable3Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        BalanceEmp,
                        Name,
                        AllCount,
                        SumMoney,
                        AvailCount,
                        AvailMoney,
                        CashCount,
                        Cash,
                        ChequeCount,
                        Cheque,
                        CreditcardCount,
                        Creditcard,
                        OthersCount,
                        Others,
                        RefundmentCount,
                        Refundment,
                        CancelCount,
                        CancelMoney};
                rowDataTable3Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowDataTable3Row);
                return rowDataTable3Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DataTable3DataTable cln = ((DataTable3DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DataTable3DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBalanceEmp = base.Columns["BalanceEmp"];
                this.columnName = base.Columns["Name"];
                this.columnAllCount = base.Columns["AllCount"];
                this.columnSumMoney = base.Columns["SumMoney"];
                this.columnAvailCount = base.Columns["AvailCount"];
                this.columnAvailMoney = base.Columns["AvailMoney"];
                this.columnCashCount = base.Columns["CashCount"];
                this.columnCash = base.Columns["Cash"];
                this.columnChequeCount = base.Columns["ChequeCount"];
                this.columnCheque = base.Columns["Cheque"];
                this.columnCreditcardCount = base.Columns["CreditcardCount"];
                this.columnCreditcard = base.Columns["Creditcard"];
                this.columnOthersCount = base.Columns["OthersCount"];
                this.columnOthers = base.Columns["Others"];
                this.columnRefundmentCount = base.Columns["RefundmentCount"];
                this.columnRefundment = base.Columns["Refundment"];
                this.columnCancelCount = base.Columns["CancelCount"];
                this.columnCancelMoney = base.Columns["CancelMoney"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBalanceEmp = new global::System.Data.DataColumn("BalanceEmp", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBalanceEmp);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnAllCount = new global::System.Data.DataColumn("AllCount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAllCount);
                this.columnSumMoney = new global::System.Data.DataColumn("SumMoney", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSumMoney);
                this.columnAvailCount = new global::System.Data.DataColumn("AvailCount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAvailCount);
                this.columnAvailMoney = new global::System.Data.DataColumn("AvailMoney", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAvailMoney);
                this.columnCashCount = new global::System.Data.DataColumn("CashCount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCashCount);
                this.columnCash = new global::System.Data.DataColumn("Cash", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCash);
                this.columnChequeCount = new global::System.Data.DataColumn("ChequeCount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChequeCount);
                this.columnCheque = new global::System.Data.DataColumn("Cheque", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCheque);
                this.columnCreditcardCount = new global::System.Data.DataColumn("CreditcardCount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreditcardCount);
                this.columnCreditcard = new global::System.Data.DataColumn("Creditcard", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreditcard);
                this.columnOthersCount = new global::System.Data.DataColumn("OthersCount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOthersCount);
                this.columnOthers = new global::System.Data.DataColumn("Others", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOthers);
                this.columnRefundmentCount = new global::System.Data.DataColumn("RefundmentCount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefundmentCount);
                this.columnRefundment = new global::System.Data.DataColumn("Refundment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefundment);
                this.columnCancelCount = new global::System.Data.DataColumn("CancelCount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCancelCount);
                this.columnCancelMoney = new global::System.Data.DataColumn("CancelMoney", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCancelMoney);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable3Row NewDataTable3Row() {
                return ((DataTable3Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DataTable3Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DataTable3Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DataTable3RowChanged != null)) {
                    this.DataTable3RowChanged(this, new DataTable3RowChangeEvent(((DataTable3Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DataTable3RowChanging != null)) {
                    this.DataTable3RowChanging(this, new DataTable3RowChangeEvent(((DataTable3Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DataTable3RowDeleted != null)) {
                    this.DataTable3RowDeleted(this, new DataTable3RowChangeEvent(((DataTable3Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DataTable3RowDeleting != null)) {
                    this.DataTable3RowDeleting(this, new DataTable3RowChangeEvent(((DataTable3Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDataTable3Row(DataTable3Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSetPrepayQuery ds = new DataSetPrepayQuery();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DataTable3DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DataTable1Row : global::System.Data.DataRow {
            
            private DataTable1DataTable tableDataTable1;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataTable1Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDataTable1 = ((DataTable1DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string INPATIENTID_CHR {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.INPATIENTID_CHRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“INPATIENTID_CHR”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.INPATIENTID_CHRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LASTNAME_VCHR {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.LASTNAME_VCHRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“LASTNAME_VCHR”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.LASTNAME_VCHRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SEX_CHR {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.SEX_CHRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“SEX_CHR”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.SEX_CHRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DEPTNAME_VCHR {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.DEPTNAME_VCHRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“DEPTNAME_VCHR”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.DEPTNAME_VCHRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CREATE_DAT {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.CREATE_DATColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“CREATE_DAT”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.CREATE_DATColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PREPAYINV_VCHR {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.PREPAYINV_VCHRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“PREPAYINV_VCHR”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.PREPAYINV_VCHRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MONEY_DEC {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.MONEY_DECColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“MONEY_DEC”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.MONEY_DECColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PAYTYPE_INT {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.PAYTYPE_INTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“PAYTYPE_INT”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.PAYTYPE_INTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BALANCEFLAG_INT {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.BALANCEFLAG_INTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“BALANCEFLAG_INT”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.BALANCEFLAG_INTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PREPAYID_CHR {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.PREPAYID_CHRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“PREPAYID_CHR”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.PREPAYID_CHRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CREATER {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.CREATERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“CREATER”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.CREATERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CUYCATE_INT {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.CUYCATE_INTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“CUYCATE_INT”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.CUYCATE_INTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UPTYPE_INT {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.UPTYPE_INTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“UPTYPE_INT”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.UPTYPE_INTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CONFIRMEMP {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.CONFIRMEMPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable1”中列“CONFIRMEMP”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable1.CONFIRMEMPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsINPATIENTID_CHRNull() {
                return this.IsNull(this.tableDataTable1.INPATIENTID_CHRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetINPATIENTID_CHRNull() {
                this[this.tableDataTable1.INPATIENTID_CHRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLASTNAME_VCHRNull() {
                return this.IsNull(this.tableDataTable1.LASTNAME_VCHRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLASTNAME_VCHRNull() {
                this[this.tableDataTable1.LASTNAME_VCHRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSEX_CHRNull() {
                return this.IsNull(this.tableDataTable1.SEX_CHRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSEX_CHRNull() {
                this[this.tableDataTable1.SEX_CHRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDEPTNAME_VCHRNull() {
                return this.IsNull(this.tableDataTable1.DEPTNAME_VCHRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDEPTNAME_VCHRNull() {
                this[this.tableDataTable1.DEPTNAME_VCHRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCREATE_DATNull() {
                return this.IsNull(this.tableDataTable1.CREATE_DATColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCREATE_DATNull() {
                this[this.tableDataTable1.CREATE_DATColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPREPAYINV_VCHRNull() {
                return this.IsNull(this.tableDataTable1.PREPAYINV_VCHRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPREPAYINV_VCHRNull() {
                this[this.tableDataTable1.PREPAYINV_VCHRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMONEY_DECNull() {
                return this.IsNull(this.tableDataTable1.MONEY_DECColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMONEY_DECNull() {
                this[this.tableDataTable1.MONEY_DECColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPAYTYPE_INTNull() {
                return this.IsNull(this.tableDataTable1.PAYTYPE_INTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPAYTYPE_INTNull() {
                this[this.tableDataTable1.PAYTYPE_INTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBALANCEFLAG_INTNull() {
                return this.IsNull(this.tableDataTable1.BALANCEFLAG_INTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBALANCEFLAG_INTNull() {
                this[this.tableDataTable1.BALANCEFLAG_INTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPREPAYID_CHRNull() {
                return this.IsNull(this.tableDataTable1.PREPAYID_CHRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPREPAYID_CHRNull() {
                this[this.tableDataTable1.PREPAYID_CHRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCREATERNull() {
                return this.IsNull(this.tableDataTable1.CREATERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCREATERNull() {
                this[this.tableDataTable1.CREATERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCUYCATE_INTNull() {
                return this.IsNull(this.tableDataTable1.CUYCATE_INTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCUYCATE_INTNull() {
                this[this.tableDataTable1.CUYCATE_INTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUPTYPE_INTNull() {
                return this.IsNull(this.tableDataTable1.UPTYPE_INTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUPTYPE_INTNull() {
                this[this.tableDataTable1.UPTYPE_INTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCONFIRMEMPNull() {
                return this.IsNull(this.tableDataTable1.CONFIRMEMPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCONFIRMEMPNull() {
                this[this.tableDataTable1.CONFIRMEMPColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DataTable2Row : global::System.Data.DataRow {
            
            private DataTable2DataTable tableDataTable2;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataTable2Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDataTable2 = ((DataTable2DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EMPNO_CHR {
                get {
                    try {
                        return ((string)(this[this.tableDataTable2.EMPNO_CHRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable2”中列“EMPNO_CHR”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable2.EMPNO_CHRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FIRSTNAME_VCHR {
                get {
                    try {
                        return ((string)(this[this.tableDataTable2.FIRSTNAME_VCHRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable2”中列“FIRSTNAME_VCHR”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable2.FIRSTNAME_VCHRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LASTNAME_VCHR {
                get {
                    try {
                        return ((string)(this[this.tableDataTable2.LASTNAME_VCHRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable2”中列“LASTNAME_VCHR”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable2.LASTNAME_VCHRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PREPAYID_CHR {
                get {
                    try {
                        return ((string)(this[this.tableDataTable2.PREPAYID_CHRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable2”中列“PREPAYID_CHR”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable2.PREPAYID_CHRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PATIENTID_CHR {
                get {
                    try {
                        return ((string)(this[this.tableDataTable2.PATIENTID_CHRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable2”中列“PATIENTID_CHR”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable2.PATIENTID_CHRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string REGISTERID_CHR {
                get {
                    try {
                        return ((string)(this[this.tableDataTable2.REGISTERID_CHRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable2”中列“REGISTERID_CHR”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable2.REGISTERID_CHRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LINER_INT {
                get {
                    try {
                        return ((string)(this[this.tableDataTable2.LINER_INTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable2”中列“LINER_INT”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable2.LINER_INTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PAYTYPE_INT {
                get {
                    try {
                        return ((string)(this[this.tableDataTable2.PAYTYPE_INTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable2”中列“PAYTYPE_INT”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable2.PAYTYPE_INTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CUYCATE_INT {
                get {
                    try {
                        return ((string)(this[this.tableDataTable2.CUYCATE_INTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable2”中列“CUYCATE_INT”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable2.CUYCATE_INTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MONEY_DEC {
                get {
                    try {
                        return ((string)(this[this.tableDataTable2.MONEY_DECColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable2”中列“MONEY_DEC”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable2.MONEY_DECColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PREPAYINV_VCHR {
                get {
                    try {
                        return ((string)(this[this.tableDataTable2.PREPAYINV_VCHRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable2”中列“PREPAYINV_VCHR”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable2.PREPAYINV_VCHRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AREAID_CHR {
                get {
                    try {
                        return ((string)(this[this.tableDataTable2.AREAID_CHRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable2”中列“AREAID_CHR”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable2.AREAID_CHRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DES_VCHR {
                get {
                    try {
                        return ((string)(this[this.tableDataTable2.DES_VCHRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable2”中列“DES_VCHR”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable2.DES_VCHRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CREATORID_CHR {
                get {
                    try {
                        return ((string)(this[this.tableDataTable2.CREATORID_CHRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable2”中列“CREATORID_CHR”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable2.CREATORID_CHRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CREATE_DAT {
                get {
                    try {
                        return ((string)(this[this.tableDataTable2.CREATE_DATColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable2”中列“CREATE_DAT”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable2.CREATE_DATColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DEACTID_CHR {
                get {
                    try {
                        return ((string)(this[this.tableDataTable2.DEACTID_CHRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable2”中列“DEACTID_CHR”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable2.DEACTID_CHRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DEACTIVATE_DAT {
                get {
                    try {
                        return ((string)(this[this.tableDataTable2.DEACTIVATE_DATColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable2”中列“DEACTIVATE_DAT”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable2.DEACTIVATE_DATColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STATUS_INT {
                get {
                    try {
                        return ((string)(this[this.tableDataTable2.STATUS_INTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable2”中列“STATUS_INT”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable2.STATUS_INTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ISCLEAR_INT {
                get {
                    try {
                        return ((string)(this[this.tableDataTable2.ISCLEAR_INTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable2”中列“ISCLEAR_INT”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable2.ISCLEAR_INTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PRESSNO_VCHR {
                get {
                    try {
                        return ((string)(this[this.tableDataTable2.PRESSNO_VCHRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable2”中列“PRESSNO_VCHR”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable2.PRESSNO_VCHRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UPTYPE_INT {
                get {
                    try {
                        return ((string)(this[this.tableDataTable2.UPTYPE_INTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable2”中列“UPTYPE_INT”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable2.UPTYPE_INTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PATIENTNAME_CHR {
                get {
                    try {
                        return ((string)(this[this.tableDataTable2.PATIENTNAME_CHRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable2”中列“PATIENTNAME_CHR”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable2.PATIENTNAME_CHRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AREANAME_VCHR {
                get {
                    try {
                        return ((string)(this[this.tableDataTable2.AREANAME_VCHRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable2”中列“AREANAME_VCHR”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable2.AREANAME_VCHRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BALANCEFLAG_INT {
                get {
                    try {
                        return ((string)(this[this.tableDataTable2.BALANCEFLAG_INTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable2”中列“BALANCEFLAG_INT”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable2.BALANCEFLAG_INTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BALANCEEMP_CHR {
                get {
                    try {
                        return ((string)(this[this.tableDataTable2.BALANCEEMP_CHRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable2”中列“BALANCEEMP_CHR”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable2.BALANCEEMP_CHRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BALANCE_DAT {
                get {
                    try {
                        return ((string)(this[this.tableDataTable2.BALANCE_DATColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable2”中列“BALANCE_DAT”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable2.BALANCE_DATColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CONFIRMEMP {
                get {
                    try {
                        return ((string)(this[this.tableDataTable2.CONFIRMEMPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable2”中列“CONFIRMEMP”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable2.CONFIRMEMPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEMPNO_CHRNull() {
                return this.IsNull(this.tableDataTable2.EMPNO_CHRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEMPNO_CHRNull() {
                this[this.tableDataTable2.EMPNO_CHRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFIRSTNAME_VCHRNull() {
                return this.IsNull(this.tableDataTable2.FIRSTNAME_VCHRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFIRSTNAME_VCHRNull() {
                this[this.tableDataTable2.FIRSTNAME_VCHRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLASTNAME_VCHRNull() {
                return this.IsNull(this.tableDataTable2.LASTNAME_VCHRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLASTNAME_VCHRNull() {
                this[this.tableDataTable2.LASTNAME_VCHRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPREPAYID_CHRNull() {
                return this.IsNull(this.tableDataTable2.PREPAYID_CHRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPREPAYID_CHRNull() {
                this[this.tableDataTable2.PREPAYID_CHRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPATIENTID_CHRNull() {
                return this.IsNull(this.tableDataTable2.PATIENTID_CHRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPATIENTID_CHRNull() {
                this[this.tableDataTable2.PATIENTID_CHRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsREGISTERID_CHRNull() {
                return this.IsNull(this.tableDataTable2.REGISTERID_CHRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetREGISTERID_CHRNull() {
                this[this.tableDataTable2.REGISTERID_CHRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLINER_INTNull() {
                return this.IsNull(this.tableDataTable2.LINER_INTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLINER_INTNull() {
                this[this.tableDataTable2.LINER_INTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPAYTYPE_INTNull() {
                return this.IsNull(this.tableDataTable2.PAYTYPE_INTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPAYTYPE_INTNull() {
                this[this.tableDataTable2.PAYTYPE_INTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCUYCATE_INTNull() {
                return this.IsNull(this.tableDataTable2.CUYCATE_INTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCUYCATE_INTNull() {
                this[this.tableDataTable2.CUYCATE_INTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMONEY_DECNull() {
                return this.IsNull(this.tableDataTable2.MONEY_DECColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMONEY_DECNull() {
                this[this.tableDataTable2.MONEY_DECColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPREPAYINV_VCHRNull() {
                return this.IsNull(this.tableDataTable2.PREPAYINV_VCHRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPREPAYINV_VCHRNull() {
                this[this.tableDataTable2.PREPAYINV_VCHRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAREAID_CHRNull() {
                return this.IsNull(this.tableDataTable2.AREAID_CHRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAREAID_CHRNull() {
                this[this.tableDataTable2.AREAID_CHRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDES_VCHRNull() {
                return this.IsNull(this.tableDataTable2.DES_VCHRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDES_VCHRNull() {
                this[this.tableDataTable2.DES_VCHRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCREATORID_CHRNull() {
                return this.IsNull(this.tableDataTable2.CREATORID_CHRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCREATORID_CHRNull() {
                this[this.tableDataTable2.CREATORID_CHRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCREATE_DATNull() {
                return this.IsNull(this.tableDataTable2.CREATE_DATColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCREATE_DATNull() {
                this[this.tableDataTable2.CREATE_DATColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDEACTID_CHRNull() {
                return this.IsNull(this.tableDataTable2.DEACTID_CHRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDEACTID_CHRNull() {
                this[this.tableDataTable2.DEACTID_CHRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDEACTIVATE_DATNull() {
                return this.IsNull(this.tableDataTable2.DEACTIVATE_DATColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDEACTIVATE_DATNull() {
                this[this.tableDataTable2.DEACTIVATE_DATColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTATUS_INTNull() {
                return this.IsNull(this.tableDataTable2.STATUS_INTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTATUS_INTNull() {
                this[this.tableDataTable2.STATUS_INTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsISCLEAR_INTNull() {
                return this.IsNull(this.tableDataTable2.ISCLEAR_INTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetISCLEAR_INTNull() {
                this[this.tableDataTable2.ISCLEAR_INTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPRESSNO_VCHRNull() {
                return this.IsNull(this.tableDataTable2.PRESSNO_VCHRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPRESSNO_VCHRNull() {
                this[this.tableDataTable2.PRESSNO_VCHRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUPTYPE_INTNull() {
                return this.IsNull(this.tableDataTable2.UPTYPE_INTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUPTYPE_INTNull() {
                this[this.tableDataTable2.UPTYPE_INTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPATIENTNAME_CHRNull() {
                return this.IsNull(this.tableDataTable2.PATIENTNAME_CHRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPATIENTNAME_CHRNull() {
                this[this.tableDataTable2.PATIENTNAME_CHRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAREANAME_VCHRNull() {
                return this.IsNull(this.tableDataTable2.AREANAME_VCHRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAREANAME_VCHRNull() {
                this[this.tableDataTable2.AREANAME_VCHRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBALANCEFLAG_INTNull() {
                return this.IsNull(this.tableDataTable2.BALANCEFLAG_INTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBALANCEFLAG_INTNull() {
                this[this.tableDataTable2.BALANCEFLAG_INTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBALANCEEMP_CHRNull() {
                return this.IsNull(this.tableDataTable2.BALANCEEMP_CHRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBALANCEEMP_CHRNull() {
                this[this.tableDataTable2.BALANCEEMP_CHRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBALANCE_DATNull() {
                return this.IsNull(this.tableDataTable2.BALANCE_DATColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBALANCE_DATNull() {
                this[this.tableDataTable2.BALANCE_DATColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCONFIRMEMPNull() {
                return this.IsNull(this.tableDataTable2.CONFIRMEMPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCONFIRMEMPNull() {
                this[this.tableDataTable2.CONFIRMEMPColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DataTable3Row : global::System.Data.DataRow {
            
            private DataTable3DataTable tableDataTable3;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataTable3Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDataTable3 = ((DataTable3DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BalanceEmp {
                get {
                    try {
                        return ((string)(this[this.tableDataTable3.BalanceEmpColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable3”中列“BalanceEmp”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable3.BalanceEmpColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableDataTable3.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable3”中列“Name”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable3.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AllCount {
                get {
                    try {
                        return ((string)(this[this.tableDataTable3.AllCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable3”中列“AllCount”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable3.AllCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SumMoney {
                get {
                    try {
                        return ((string)(this[this.tableDataTable3.SumMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable3”中列“SumMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable3.SumMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AvailCount {
                get {
                    try {
                        return ((string)(this[this.tableDataTable3.AvailCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable3”中列“AvailCount”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable3.AvailCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AvailMoney {
                get {
                    try {
                        return ((string)(this[this.tableDataTable3.AvailMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable3”中列“AvailMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable3.AvailMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CashCount {
                get {
                    try {
                        return ((string)(this[this.tableDataTable3.CashCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable3”中列“CashCount”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable3.CashCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Cash {
                get {
                    try {
                        return ((string)(this[this.tableDataTable3.CashColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable3”中列“Cash”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable3.CashColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ChequeCount {
                get {
                    try {
                        return ((string)(this[this.tableDataTable3.ChequeCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable3”中列“ChequeCount”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable3.ChequeCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Cheque {
                get {
                    try {
                        return ((string)(this[this.tableDataTable3.ChequeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable3”中列“Cheque”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable3.ChequeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CreditcardCount {
                get {
                    try {
                        return ((string)(this[this.tableDataTable3.CreditcardCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable3”中列“CreditcardCount”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable3.CreditcardCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Creditcard {
                get {
                    try {
                        return ((string)(this[this.tableDataTable3.CreditcardColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable3”中列“Creditcard”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable3.CreditcardColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OthersCount {
                get {
                    try {
                        return ((string)(this[this.tableDataTable3.OthersCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable3”中列“OthersCount”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable3.OthersCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Others {
                get {
                    try {
                        return ((string)(this[this.tableDataTable3.OthersColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable3”中列“Others”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable3.OthersColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RefundmentCount {
                get {
                    try {
                        return ((string)(this[this.tableDataTable3.RefundmentCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable3”中列“RefundmentCount”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable3.RefundmentCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Refundment {
                get {
                    try {
                        return ((string)(this[this.tableDataTable3.RefundmentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable3”中列“Refundment”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable3.RefundmentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CancelCount {
                get {
                    try {
                        return ((string)(this[this.tableDataTable3.CancelCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable3”中列“CancelCount”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable3.CancelCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CancelMoney {
                get {
                    try {
                        return ((string)(this[this.tableDataTable3.CancelMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DataTable3”中列“CancelMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDataTable3.CancelMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBalanceEmpNull() {
                return this.IsNull(this.tableDataTable3.BalanceEmpColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBalanceEmpNull() {
                this[this.tableDataTable3.BalanceEmpColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableDataTable3.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableDataTable3.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAllCountNull() {
                return this.IsNull(this.tableDataTable3.AllCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAllCountNull() {
                this[this.tableDataTable3.AllCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSumMoneyNull() {
                return this.IsNull(this.tableDataTable3.SumMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSumMoneyNull() {
                this[this.tableDataTable3.SumMoneyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAvailCountNull() {
                return this.IsNull(this.tableDataTable3.AvailCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAvailCountNull() {
                this[this.tableDataTable3.AvailCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAvailMoneyNull() {
                return this.IsNull(this.tableDataTable3.AvailMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAvailMoneyNull() {
                this[this.tableDataTable3.AvailMoneyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCashCountNull() {
                return this.IsNull(this.tableDataTable3.CashCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCashCountNull() {
                this[this.tableDataTable3.CashCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCashNull() {
                return this.IsNull(this.tableDataTable3.CashColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCashNull() {
                this[this.tableDataTable3.CashColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChequeCountNull() {
                return this.IsNull(this.tableDataTable3.ChequeCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChequeCountNull() {
                this[this.tableDataTable3.ChequeCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChequeNull() {
                return this.IsNull(this.tableDataTable3.ChequeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChequeNull() {
                this[this.tableDataTable3.ChequeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreditcardCountNull() {
                return this.IsNull(this.tableDataTable3.CreditcardCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreditcardCountNull() {
                this[this.tableDataTable3.CreditcardCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreditcardNull() {
                return this.IsNull(this.tableDataTable3.CreditcardColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreditcardNull() {
                this[this.tableDataTable3.CreditcardColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOthersCountNull() {
                return this.IsNull(this.tableDataTable3.OthersCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOthersCountNull() {
                this[this.tableDataTable3.OthersCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOthersNull() {
                return this.IsNull(this.tableDataTable3.OthersColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOthersNull() {
                this[this.tableDataTable3.OthersColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRefundmentCountNull() {
                return this.IsNull(this.tableDataTable3.RefundmentCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRefundmentCountNull() {
                this[this.tableDataTable3.RefundmentCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRefundmentNull() {
                return this.IsNull(this.tableDataTable3.RefundmentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRefundmentNull() {
                this[this.tableDataTable3.RefundmentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCancelCountNull() {
                return this.IsNull(this.tableDataTable3.CancelCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCancelCountNull() {
                this[this.tableDataTable3.CancelCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCancelMoneyNull() {
                return this.IsNull(this.tableDataTable3.CancelMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCancelMoneyNull() {
                this[this.tableDataTable3.CancelMoneyColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DataTable1RowChangeEvent : global::System.EventArgs {
            
            private DataTable1Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable1RowChangeEvent(DataTable1Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable1Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DataTable2RowChangeEvent : global::System.EventArgs {
            
            private DataTable2Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable2RowChangeEvent(DataTable2Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable2Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DataTable3RowChangeEvent : global::System.EventArgs {
            
            private DataTable3Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable3RowChangeEvent(DataTable3Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable3Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591